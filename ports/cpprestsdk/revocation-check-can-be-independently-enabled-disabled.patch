From 9de63baaa1dfbb8769144827de1019380ebebdd5 Mon Sep 17 00:00:00 2001
From: Honza Vana <jan.vana@tbs-biometrics.com>
Date: Thu, 27 Jul 2023 09:26:03 +0200
Subject: [PATCH] revocation check can be independently enabled/disabled

---
 Release/include/cpprest/http_client.h         | 15 +++++++++++++
 .../src/http/client/http_client_winhttp.cpp   | 22 ++++++++++---------
 2 files changed, 27 insertions(+), 10 deletions(-)

diff --git a/Release/include/cpprest/http_client.h b/Release/include/cpprest/http_client.h
index fb7c6067..a7f807bb 100644
--- a/Release/include/cpprest/http_client.h
+++ b/Release/include/cpprest/http_client.h
@@ -100,6 +100,7 @@ public:
         , m_request_compressed(false)
 #if !defined(__cplusplus_winrt)
         , m_validate_certificates(true)
+        , m_check_ssl_certificate_revocation(true)
 #endif
 #if !defined(_WIN32) && !defined(__cplusplus_winrt) || defined(CPPREST_FORCE_HTTP_CLIENT_ASIO)
         , m_tlsext_sni_enabled(true)
@@ -262,6 +263,19 @@ public:
     /// otherwise.</param> <remarks>Note ignoring certificate errors can be dangerous and should be done with
     /// caution.</remarks>
     void set_validate_certificates(bool validate_certs) { m_validate_certificates = validate_certs; }
+
+    /// <summary>
+    /// Gets the enable SSL revocation property.
+    /// </summary>
+    /// <returns>True if certificates revocation is to be checked, false otherwise.</returns>
+    bool check_ssl_certificate_revocation() const { return m_check_ssl_certificate_revocation; }
+
+    /// <summary>
+    /// Sets the enable SSL revocation property.
+    /// </summary>
+    /// <param name="check_ssl_certificate_revocation">True to check certificate validation, false to skip these checks.</param>
+    /// <remarks>Note ignoring certificate revocation can be dangerous and should be done with caution.</remarks>
+    void set_check_ssl_certificate_revocation(bool check_ssl_certificate_revocation) { m_check_ssl_certificate_revocation = check_ssl_certificate_revocation; }
 #endif
 
 #if (defined(_WIN32) && !defined(__cplusplus_winrt)) || defined(CPPREST_FORCE_HTTP_CLIENT_WINHTTPPAL)
@@ -414,6 +428,7 @@ private:
 #if !defined(__cplusplus_winrt)
     // IXmlHttpRequest2 doesn't allow configuration of certificate verification.
     bool m_validate_certificates;
+    bool m_check_ssl_certificate_revocation;
 #endif
 
     std::function<void(native_handle)> m_set_user_nativehandle_options;
diff --git a/Release/src/http/client/http_client_winhttp.cpp b/Release/src/http/client/http_client_winhttp.cpp
index d6cdb538..e92a82c5 100644
--- a/Release/src/http/client/http_client_winhttp.cpp
+++ b/Release/src/http/client/http_client_winhttp.cpp
@@ -1091,16 +1091,18 @@ protected:
         DWORD ignoredCertificateValidationSteps = 0;
         if (client_config().validate_certificates())
         {
-            // if we are validating certificates, also turn on revocation checking
-            DWORD dwEnableSSLRevocationOpt = WINHTTP_ENABLE_SSL_REVOCATION;
-            if (!WinHttpSetOption(winhttp_context->m_request_handle,
-                                  WINHTTP_OPTION_ENABLE_FEATURE,
-                                  &dwEnableSSLRevocationOpt,
-                                  sizeof(dwEnableSSLRevocationOpt)))
-            {
-                auto errorCode = GetLastError();
-                request->report_error(errorCode, build_error_msg(errorCode, "Error enabling SSL revocation check"));
-                return;
+            if (client_config().check_ssl_certificate_revocation())
+            {
+	            DWORD dwEnableSSLRevocationOpt = WINHTTP_ENABLE_SSL_REVOCATION;
+	            if (!WinHttpSetOption(winhttp_context->m_request_handle,
+	                                  WINHTTP_OPTION_ENABLE_FEATURE,
+	                                  &dwEnableSSLRevocationOpt,
+	                                  sizeof(dwEnableSSLRevocationOpt)))
+	            {
+	                auto errorCode = GetLastError();
+	                request->report_error(errorCode, build_error_msg(errorCode, "Error enabling SSL revocation check"));
+	                return;
+	            }
             }
 
             // check if the user has overridden the desired Common Name with the host header
-- 
2.29.1.windows.1

